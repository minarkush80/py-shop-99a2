// OukaroManager AppList Handler
// Optimized app list management inspired by KOWX712/Tricky-Addon-Update-Target-List
// Original optimization techniques by KOWX712 (https://github.com/KOWX712/Tricky-Addon-Update-Target-List)

class AppListManager {
    constructor() {
        this.userApps = [];
        this.systemApps = [];
        this.convertedApps = [];
        this.filteredApps = [];
        this.searchQuery = '';
        this.currentFilter = 'all';
        this.sortBy = 'name';
        this.sortOrder = 'asc';
        this.isLoading = false;
        
        this.init();
    }

    async init() {
        this.setupEventListeners();
        await this.loadAppLists();
        this.renderAppsList();
    }

    setupEventListeners() {
        // Search functionality
        const searchInput = document.getElementById('appSearch');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value.toLowerCase();
                this.filterAndRenderApps();
            });
        }

        // Filter buttons
        const filterButtons = document.querySelectorAll('.filter-btn');
        filterButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                filterButtons.forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                this.currentFilter = e.target.dataset.filter;
                this.filterAndRenderApps();
            });
        });

        // Sort dropdown
        const sortSelect = document.getElementById('sortSelect');
        if (sortSelect) {
            sortSelect.addEventListener('change', (e) => {
                const [sortBy, sortOrder] = e.target.value.split('-');
                this.sortBy = sortBy;
                this.sortOrder = sortOrder;
                this.filterAndRenderApps();
            });
        }

        // Refresh button
        const refreshBtn = document.getElementById('refreshApps');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.refreshAppList();
            });
        }

        // Select all/none buttons
        const selectAllBtn = document.getElementById('selectAll');
        const selectNoneBtn = document.getElementById('selectNone');
        
        if (selectAllBtn) {
            selectAllBtn.addEventListener('click', () => {
                this.selectAllApps(true);
            });
        }
        
        if (selectNoneBtn) {
            selectNoneBtn.addEventListener('click', () => {
                this.selectAllApps(false);
            });
        }
    }

    async loadAppLists() {
        this.setLoading(true);
        
        try {
            // Load cached app lists generated by service.sh
            const [userAppsResponse, systemAppsResponse] = await Promise.all([
                this.loadCachedAppList('applist.json'),
                this.loadCachedAppList('systemlist.json')
            ]);

            this.userApps = userAppsResponse || [];
            this.systemApps = systemAppsResponse || [];
            
            // Load converted apps from storage
            await this.loadConvertedApps();
            
            console.log(`Loaded ${this.userApps.length} user apps, ${this.systemApps.length} system apps`);
            
        } catch (error) {
            console.error('Failed to load app lists:', error);
            // Fallback to empty arrays
            this.userApps = [];
            this.systemApps = [];
        } finally {
            this.setLoading(false);
        }
    }

    async loadCachedAppList(filename) {
        try {
            const response = await fetch(filename);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            return Array.isArray(data) ? data : [];
        } catch (error) {
            console.warn(`Failed to load ${filename}:`, error);
            return [];
        }
    }

    async loadConvertedApps() {
        try {
            const stored = localStorage.getItem('oukaroConvertedApps');
            this.convertedApps = stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('Failed to load converted apps:', error);
            this.convertedApps = [];
        }
    }

    async refreshAppList() {
        this.setLoading(true);
        
        // Clear cache and reload
        this.userApps = [];
        this.systemApps = [];
        
        // Wait a bit for service.sh to regenerate lists
        setTimeout(async () => {
            await this.loadAppLists();
            this.filterAndRenderApps();
            this.showToast('App list refreshed', 'success');
        }, 2000);
    }

    filterAndRenderApps() {
        let allApps = [];
        
        // Combine apps based on current filter
        switch (this.currentFilter) {
            case 'user':
                allApps = [...this.userApps];
                break;
            case 'system':
                allApps = [...this.systemApps];
                break;
            case 'converted':
                allApps = [...this.convertedApps];
                break;
            default:
                allApps = [...this.userApps, ...this.systemApps];
        }

        // Apply search filter
        if (this.searchQuery) {
            allApps = allApps.filter(app => 
                app.app_name.toLowerCase().includes(this.searchQuery) ||
                app.package_name.toLowerCase().includes(this.searchQuery)
            );
        }

        // Sort apps
        allApps.sort((a, b) => {
            let aValue, bValue;
            
            switch (this.sortBy) {
                case 'name':
                    aValue = a.app_name.toLowerCase();
                    bValue = b.app_name.toLowerCase();
                    break;
                case 'package':
                    aValue = a.package_name.toLowerCase();
                    bValue = b.package_name.toLowerCase();
                    break;
                case 'size':
                    aValue = parseFloat(a.size_mb || 0);
                    bValue = parseFloat(b.size_mb || 0);
                    break;
                default:
                    aValue = a.app_name.toLowerCase();
                    bValue = b.app_name.toLowerCase();
            }

            if (this.sortOrder === 'desc') {
                return aValue < bValue ? 1 : aValue > bValue ? -1 : 0;
            } else {
                return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;
            }
        });

        this.filteredApps = allApps;
        this.renderAppsList();
        this.updateAppCount();
    }

    renderAppsList() {
        const container = document.getElementById('appListContainer');
        if (!container) return;

        if (this.isLoading) {
            container.innerHTML = `
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                    <div class="loading-text">Loading applications...</div>
                </div>
            `;
            return;
        }

        if (this.filteredApps.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">ðŸ“±</div>
                    <div class="empty-text">No applications found</div>
                    <div class="empty-subtext">Try adjusting your search or filter criteria</div>
                </div>
            `;
            return;
        }

        const appsHTML = this.filteredApps.map(app => this.createAppCard(app)).join('');
        container.innerHTML = appsHTML;

        // Reattach event listeners for checkboxes
        this.attachAppEventListeners();
    }

    createAppCard(app) {
        const isConverted = this.convertedApps.some(converted => converted.package_name === app.package_name);
        const isSelected = window.oukaroManager?.selectedApps?.has(app.package_name) || false;
        
        return `
            <div class="app-card ${isConverted ? 'converted' : ''}" data-package="${app.package_name}">
                <div class="app-card-header">
                    <div class="app-checkbox-container">
                        <input type="checkbox" 
                               class="app-checkbox" 
                               data-package="${app.package_name}"
                               ${isSelected ? 'checked' : ''}
                               ${isConverted ? 'disabled' : ''}>
                    </div>
                    <div class="app-info">
                        <div class="app-name" title="${app.app_name}">${app.app_name}</div>
                        <div class="app-package">${app.package_name}</div>
                    </div>
                    <div class="app-badges">
                        ${app.type ? `<span class="app-badge app-badge-${app.type}">${app.type}</span>` : ''}
                        ${isConverted ? '<span class="app-badge app-badge-converted">Converted</span>' : ''}
                    </div>
                </div>
                <div class="app-card-details">
                    ${app.version_name ? `<div class="app-detail"><strong>Version:</strong> ${app.version_name}</div>` : ''}
                    ${app.size_mb ? `<div class="app-detail"><strong>Size:</strong> ${app.size_mb} MB</div>` : ''}
                    <div class="app-detail"><strong>Path:</strong> <code>${app.apk_path || 'Unknown'}</code></div>
                </div>
                ${isConverted ? `
                    <div class="app-actions">
                        <button class="btn btn-danger btn-sm" onclick="appListManager.removeConvertedApp('${app.package_name}')">
                            Remove Conversion
                        </button>
                    </div>
                ` : ''}
            </div>
        `;
    }

    attachAppEventListeners() {
        const checkboxes = document.querySelectorAll('.app-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const packageName = e.target.dataset.package;
                if (e.target.checked) {
                    window.oukaroManager?.selectedApps?.add(packageName);
                } else {
                    window.oukaroManager?.selectedApps?.delete(packageName);
                }
                this.updateSelectionCount();
            });
        });
    }

    selectAllApps(select) {
        const checkboxes = document.querySelectorAll('.app-checkbox:not(:disabled)');
        checkboxes.forEach(checkbox => {
            checkbox.checked = select;
            const packageName = checkbox.dataset.package;
            if (select) {
                window.oukaroManager?.selectedApps?.add(packageName);
            } else {
                window.oukaroManager?.selectedApps?.delete(packageName);
            }
        });
        this.updateSelectionCount();
    }

    updateSelectionCount() {
        const count = window.oukaroManager?.selectedApps?.size || 0;
        const countElement = document.getElementById('selectionCount');
        if (countElement) {
            countElement.textContent = `${count} selected`;
        }
    }

    updateAppCount() {
        const countElement = document.getElementById('appCount');
        if (countElement) {
            countElement.textContent = `${this.filteredApps.length} apps`;
        }
    }

    async removeConvertedApp(packageName) {
        if (confirm('Are you sure you want to remove this app conversion?')) {
            this.convertedApps = this.convertedApps.filter(app => app.package_name !== packageName);
            localStorage.setItem('oukaroConvertedApps', JSON.stringify(this.convertedApps));
            
            // TODO: Call API to remove from system
            
            this.filterAndRenderApps();
            this.showToast('App conversion removed', 'success');
        }
    }

    setLoading(loading) {
        this.isLoading = loading;
        const refreshBtn = document.getElementById('refreshApps');
        if (refreshBtn) {
            refreshBtn.disabled = loading;
            refreshBtn.innerHTML = loading ? 
                '<i class="loading-spinner"></i> Loading...' : 
                '<i class="icon-refresh"></i> Refresh';
        }
    }

    showToast(message, type = 'info') {
        // Create and show toast notification
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.classList.add('show');
        }, 100);
        
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 3000);
    }

    // API for external access
    getSelectedApps() {
        return Array.from(window.oukaroManager?.selectedApps || []).map(packageName => {
            return this.filteredApps.find(app => app.package_name === packageName);
        }).filter(Boolean);
    }

    getAppByPackageName(packageName) {
        return [...this.userApps, ...this.systemApps].find(app => app.package_name === packageName);
    }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.appListManager = new AppListManager();
});
